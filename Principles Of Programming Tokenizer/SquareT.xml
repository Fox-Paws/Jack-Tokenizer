<tokens>
<keyword> class </keyword>
<identifier> Square </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<terminator> ; </terminator>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> size </identifier>
<terminator> ; </terminator>
<keyword> constructor </keyword>
<identifier> Square </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> Ax </identifier>
<operator> , </operator>
<keyword> int </keyword>
<identifier> Ay </identifier>
<operator> , </operator>
<keyword> int </keyword>
<identifier> Asize </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> Ax </identifier>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> y </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> Ay </identifier>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> size </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> Asize </identifier>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> return </keyword>
<keyword> this </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<operator> . </operator>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> incSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> < </operator>
<integerConstant> 254 </integerConstant>
<symbol> ) </symbol>
<operator> & </operator>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> < </operator>
<integerConstant> 510 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> size </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> size </identifier>
<operator> + </operator>
<integerConstant> 2 </integerConstant>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> decSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> size </identifier>
<operator> > </operator>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> size </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> size </identifier>
<operator> - </operator>
<integerConstant> 2 </integerConstant>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> y </identifier>
<operator> > </operator>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<symbol> ( </symbol>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> - </operator>
<integerConstant> 1 </integerConstant>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> y </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> y </identifier>
<operator> - </operator>
<integerConstant> 2 </integerConstant>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveDown </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> < </operator>
<integerConstant> 254 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> y </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> y </identifier>
<operator> + </operator>
<integerConstant> 2 </integerConstant>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<symbol> ( </symbol>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> - </operator>
<integerConstant> 1 </integerConstant>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> > </operator>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> - </operator>
<integerConstant> 1 </integerConstant>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> x </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> x </identifier>
<operator> - </operator>
<integerConstant> 2 </integerConstant>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<integerConstant> 1 </integerConstant>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> < </operator>
<integerConstant> 510 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<integerConstant> 1 </integerConstant>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> x </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> x </identifier>
<operator> + </operator>
<integerConstant> 2 </integerConstant>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Screen </identifier>
<operator> . </operator>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<operator> - </operator>
<integerConstant> 1 </integerConstant>
<operator> , </operator>
<identifier> y </identifier>
<operator> , </operator>
<identifier> x </identifier>
<operator> + </operator>
<identifier> size </identifier>
<operator> , </operator>
<identifier> y </identifier>
<operator> + </operator>
<identifier> size </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>