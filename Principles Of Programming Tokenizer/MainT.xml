<tokens>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> a </identifier>
<terminator> ; </terminator>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> length </identifier>
<terminator> ; </terminator>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> sum </identifier>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> length </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> Keyboard </identifier>
<operator> . </operator>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<symbol> " </symbol>
<stringConstant> HOW MANY NUMBERS?  </stringConstant>
<symbol> " </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> a </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> Array </identifier>
<operator> . </operator>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> length </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> i </identifier>
<assignmentOperator> = </assignmentOperator>
<integerConstant> 0 </integerConstant>
<terminator> ; </terminator>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<operator> < </operator>
<identifier> length </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<assignmentOperator> = </assignmentOperator>
<identifier> Keyboard </identifier>
<operator> . </operator>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<symbol> " </symbol>
<stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
<symbol> " </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> i </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> i </identifier>
<operator> + </operator>
<integerConstant> 1 </integerConstant>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<assignmentOperator> = </assignmentOperator>
<integerConstant> 0 </integerConstant>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> sum </identifier>
<assignmentOperator> = </assignmentOperator>
<integerConstant> 0 </integerConstant>
<terminator> ; </terminator>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<operator> < </operator>
<identifier> length </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> sum </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> sum </identifier>
<operator> + </operator>
<identifier> a </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<terminator> ; </terminator>
<keyword> let </keyword>
<identifier> i </identifier>
<assignmentOperator> = </assignmentOperator>
<identifier> i </identifier>
<operator> + </operator>
<integerConstant> 1 </integerConstant>
<terminator> ; </terminator>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<operator> . </operator>
<identifier> printString </identifier>
<symbol> ( </symbol>
<symbol> " </symbol>
<stringConstant> THE AVERAGE IS:  </stringConstant>
<symbol> " </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Output </identifier>
<operator> . </operator>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> sum </identifier>
<identifier> / </identifier>
<identifier> length </identifier>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> do </keyword>
<identifier> Output </identifier>
<operator> . </operator>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<terminator> ; </terminator>
<keyword> return </keyword>
<terminator> ; </terminator>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>